name: Build and Publish Windows Exe

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-win:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # 如果有的话，安装项目的依赖项
          pip install pyinstaller

      - name: Build exe
        run: |
          pyinstaller -F --onefile --windowed --debug all -n main main.py
          dir dist
        working-directory: ${{ github.workspace }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_id }}
          release_name: Release v1.0.0-${{ github.run_id }}
          body: Auto-generated release
          draft: false
          prerelease: false
          
      #压缩打包资产文件
      - name: Create ZIP archive
        id: CreateFile
        run: |
          $version = $env:APPVEYOR_BUILD_VERSION
          $zip_file = "dist\mainExe.zip"
          #Compress-Archive -Path "./bin/Release/${{ env.main_project}}.dll" -DestinationPath "./bin/Release/$zip_file"
          Compress-Archive -Path dist\main.exe -DestinationPath $zip_file
          $hash = Get-FileHash  dist\main.exe -Algorithm SHA256
          $hashValue = $hash.Hash
          Write-Host "::set-output name=sha256::$hashValue"
          echo $hashValue >> dist\sha256_${{$hashValue}}.txt
          
      - name: Upload Release Asset exe
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist\main.exe
          asset_name: main.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset zip
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist\mainExe.zip
          asset_name: mainExe.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset sha256
        id: upload-release-asset-sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist\sha256_${{ steps.CreateFile.outputs.sha256 }}}.txt
          asset_name: sha256_${{ steps.CreateFile.outputs.sha256 }}}.txt
          asset_content_type: application/octet-stream
  build-macOS:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # 如果有的话，安装项目的依赖项
          pip install pyinstaller

      - name: Build app
        run: |
          pyinstaller -F --onefile -n main main.py
          ls dist
        working-directory: ${{ github.workspace }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_id }}
          release_name: Release v1.0.0-${{ github.run_id }}
          body: Auto-generated release
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main
          asset_name: main
          asset_content_type: application/octet-stream
